// PURPOSE: test basic numeric functions for a variety of types
assert(-1 == -1);
assert(2 == 2);
assert(2 != 1);
assert(2 > 1);
assert(2 >= 1);
assert(1 < 2);
assert(1 <= 2);
assert((1 <=> 2) == -1);
assert((2 <=> 1) == 1);
assert((1 <=> 1) == 0);

assert(1U == 1U);
assert(0U == 0U);
assert(2U != 1U);
assert(2U > 1U);
assert(2U >= 1U);
assert(1U < 2U);
assert(1U <= 2U);
assert((1U <=> 2U) == -1);
assert((2U <=> 1U) == 1);
assert((1U <=> 1U) == 0);

assert(-1S == -1S);
assert(2S == 2S);
assert(2S != 1S);
assert(2S > 1S);
assert(2S >= 1S);
assert(1S < 2S);
assert(1S <= 2S);
assert((1S <=> 2S) == -1);
assert((2S <=> 1S) == 1);
assert((1S <=> 1S) == 0);

assert(1US == 1US);
assert(0US == 0US);
assert(2US != 1US);
assert(2US > 1US);
assert(2US >= 1US);
assert(1US < 2US);
assert(1US <= 2US);
assert((1US <=> 2US) == -1);
assert((2US <=> 1US) == 1);
assert((1US <=> 1US) == 0);

assert(-1L == -1L);
assert(2L == 2L);
assert(2L != 1L);
assert(2L > 1L);
assert(2L >= 1L);
assert(1L < 2L);
assert(1L <= 2L);
assert((1L <=> 2L) == -1);
assert((2L <=> 1L) == 1);
assert((1L <=> 1L) == 0);

assert(1UL == 1UL);
assert(0UL == 0UL);
assert(2UL != 1UL);
assert(2UL > 1UL);
assert(2UL >= 1UL);
assert(1UL < 2UL);
assert(1UL <= 2UL);
assert((1UL <=> 2UL) == -1);
assert((2UL <=> 1UL) == 1);
assert((1UL <=> 1UL) == 0);


assert(2*8+1 == 17);

{
var i = 1;
assert(i++ == 1);
assert(i++ == 2);
assert(++i == 4);
assert(++i == 5);
assert(++i == 6);
i *= 2;
assert(++i == 13);
i /= 2;
assert(--i == 5);
assert(--i == 4);
assert(i-- == 4);
assert(i-- == 3);
assert(i == 2);
}
